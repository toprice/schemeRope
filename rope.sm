(define rope 
  (letrec ((node (lambda (l r weight text) (lambda (val) (case val ('l l) ('r r) ('weight weight) ('text text) ('setRight (lambda (newr) (set! r newr))) ('setLeft (lambda (newl) (setl r newl)))))))
         (rootNode '())
         (buildTree (lambda (nodeLst)
                            (letrec ((doRow (lambda (prev connectLeft? oldRow newRow)
                                                    (if (eq? oldRow '())
                                                        newRow
                                                        (if (and connectLeft? (not (eq? prev '())))
                                                            (begin ((prev 'setRight) (car oldRow))
                                                                   (doRow (car oldRow) (not connectLeft?) (cdr oldRow) newRow))
                                                            (doRow (car oldRow)
                                                                   (not connectLeft?)
                                                                   (cdr oldRow)
                                                                   (cons (node (car oldRow) '() ((car oldRow) 'weight) "")
                                                                         newRow)
                                                            )
                                                        )
                                                    ))))
                                    (if (eq? (cdr nodeLst '()))
                                      (car nodeLst)
                                      (buildTree (doRow '() #f nodeLst '()))))))
         (build (lambda (string) 
                         (letrec ((cutter (lambda (string n) 
                                                  (if (> (string-length string) n) 
                                                      (cons (substring string 0 n) 
                                                            (cutter (substring string n (string-length string)) n))
                                                      string)))
                                  (nodify (lambda (strings nodes)
                                            (if (eq? strings '())
                                                nodes
                                                (nodify (cdr strings) (cons (node '() '() (string-length (car strings)) (car strings)))))))
                                 (set! rootNode (buildTree (nodify (cutter string 3) '()))))))))
        (lambda (str)
          (begin
            (build str)
            (display rootNode)
            (lambda (proc)
              (case proc
      	        ('read str)
                (else #f)
              )
            )
          )
        )
    )
  )
)

(let ((obj (rope "hi"))) (obj 'read))
