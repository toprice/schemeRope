(define rope
  (letrec (
           (node (lambda (l r weight text)
                    (let* ((fullWeight weight)
                           (updateWeight (lambda ()
                                            (let ((hasL (not (eq? l '())))
                                                  (hasR (not (eq? r '()))))
                                                (begin (if hasL (l 'updateWeight))
                                                       (if hasR (r 'updateWeight))
                                                       (set! weight (if hasL (l 'fullWeight) 0))
                                                       (set! weight (+ weight (string-length text)))
                                                       (set! fullWeight (+ weight (if hasR (r 'fullWeight) 0)))
                                                       (if #f (display (string-append "updating \""
                                                                               text
                                                                               "\" to have weight "
                                                                               (number->string weight)
                                                                               "\" and fullWeight "
                                                                               (number->string fullWeight))))
                                                       (newline))))))
                         (begin
                           (updateWeight)
                           (lambda (val)
                                   (case val 
                                       ('l l)
                                       ('r r)
                                       ('weight (begin  weight)) ;NOTE cascading weight updates are very inefficient
                                       ('fullWeight (begin fullWeight))
                                       ('updateWeight (updateWeight))
                                       ('text text)
                                       ('setRight (lambda (newr) 
                                                          (begin
                                                                 ;(display (string-append "Setting r of \"" text "\" to \"" (newr 'text) "\""))
                                                                 (set! r newr)
                                                                 )))
                                       ('setLeft  (lambda (newl) (set! l newl)))))))))
         (rootNode '())
         (buildTree (lambda (nodeLst)
                            (letrec ((doRow (lambda (prev connectLeft? oldRow newRow)
                                                    (if (eq? oldRow '())
                                                        newRow
                                                        (if (and connectLeft? (not (eq? prev '())))
                                                            (begin ((prev 'setRight) (car oldRow))
                                                                   (doRow (car oldRow) (not connectLeft?) (cdr oldRow) newRow))
                                                            (doRow (car oldRow)
                                                                   (not connectLeft?)
                                                                   (cdr oldRow)
                                                                   (append newRow 
                                                                           (cons (node (car oldRow) '() ((car oldRow) 'weight) "") '()))))))))
                                    (if (eq? (cdr nodeLst) '())
                                      (begin ((car nodeLst) 'updateWeight) (car nodeLst))
                                      (buildTree (doRow '() #f nodeLst '()))))))
         (build (lambda (string) 
                         (letrec ((cutter (lambda (string n) 
                                                  (let ((strLen  (string-length string)))
                                                       (if (> strLen n)
                                                           (cons (substring string (- strLen n) strLen) 
                                                                 (cutter (substring string 0 (- strLen n)) n))
                                                           (cons string '())))))
                                  (displayNodeList (lambda (lst)
                                                           (if (eq? lst '())
                                                               (newline)
                                                               (begin (display ((car lst) 'text)) (displayNodeList (cdr lst))))))
                                  (nodify (lambda (strings nodes)
                                            (if (eq? strings '())
                                                (begin (displayNodeList nodes) nodes)
                                                (nodify (cdr strings) (cons (node '() '() (string-length (car strings)) (car strings)) nodes))))))
                                 (set! rootNode (buildTree (nodify (cutter string 3) '()))))))
        (index (lambda (i)
                       (letrec ((recurser (lambda (node i)
                                                  (if (<= (node 'weight) i)
                                                      (recurser (node 'r) (- i (node 'weight)))
                                                      (if (not (eq? (node 'l) '()))
                                                          (recurser (node 'l) i)
                                                          (substring (node 'text) i (+ i 1)))))))
                               (recurser rootNode i)))))
        (lambda (str)
          (begin
            (build str)
            (display rootNode)
            (lambda (proc)
              (case proc
      	        ('root rootNode)
                ('index (lambda (i) (index i)))
                (else #f)))))
  )
)

(define ex (rope "example_text"))
((ex 'index) 0)
