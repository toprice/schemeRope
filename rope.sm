(define rope 
  (letrec (
           (node (lambda (l r weight text)
                    (let ((updateWeight (lambda ()
                                                (begin (set! weight (if (not (eq? l '())) (l 'weight) 0))
                                                       (set! weight (if (not (eq? r '())) (+ (r 'weight) weight) weight))
                                                       (set! weight (+ weight (string-length text)))))))
                         (begin
                           (updateWeight)
                           (lambda (val)
                                   (case val 
                                       ('l l)
                                       ('r r)
                                       ('weight (begin (updateWeight) weight)) ;NOTE cascading weight updates are very inefficient
                                       ('text text)
                                       ('setRight (lambda (newr) 
                                                          (begin 
                                                                 ;(display (string-append "Setting r of \"" text "\" to \"" (newr 'text) "\""))
                                                                 (set! r newr)
                                                                 (updateWeight))))
                                       ('setLeft  (lambda (newl) (set! l newl) (updateWeight)))))))))
         (rootNode '())
         (buildTree (lambda (nodeLst)
                            (letrec ((doRow (lambda (prev connectLeft? oldRow newRow)
                                                    (if (eq? oldRow '())
                                                        newRow
                                                        (if (and connectLeft? (not (eq? prev '())))
                                                            (begin ((prev 'setRight) (car oldRow))
                                                                   (doRow (car oldRow) (not connectLeft?) (cdr oldRow) newRow))
                                                            (doRow (car oldRow)
                                                                   (not connectLeft?)
                                                                   (cdr oldRow)
                                                                   (cons (node (car oldRow) '() ((car oldRow) 'weight) "")
                                                                         newRow)
                                                            )
                                                        )
                                                    ))))
                                    (if (eq? (cdr nodeLst) '())
                                      (car nodeLst)
                                      (buildTree (doRow '() #f nodeLst '()))))))
         (build (lambda (string) 
                         (letrec ((cutter (lambda (string n) 
                                                  (let ((strLen  (string-length string)))
                                                       (if (> strLen n)
                                                           (cons (substring string (- strLen n) strLen) 
                                                                 (cutter (substring string 0 (- strLen n)) n))
                                                           (cons string '())))))
                                  (displayNodeList (lambda (lst)
                                                           (if (eq? lst '())
                                                               (newline)
                                                               (begin (display ((car lst) 'text)) (displayNodeList (cdr lst))))))
                                  (nodify (lambda (strings nodes)
                                            (if (eq? strings '())
                                                (begin (displayNodeList nodes) nodes)
                                                (nodify (cdr strings) (cons (node '() '() (string-length (car strings)) (car strings)) nodes))))))
                                 (set! rootNode (buildTree (nodify (cutter string 3) '())))))))
        (lambda (str)
          (begin
            (build str)
            (display rootNode)
            (lambda (proc)
              (case proc
      	        ('read rootNode)
                (else #f)))))
  )
)

(let ((ex (rope "example_text"))) (ex 'read))
